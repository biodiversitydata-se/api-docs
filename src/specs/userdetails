openapi: 3.0.1
info:
  title: UserDetails REST services
  description: REST services for interacting with the user details webapp
  termsOfService: https://docs.biodiversitydata.se/sbdi-data/sbdi-atlas-terms-of-use/
  contact:
    name: ""
    email: ""
  license:
    name: Mozilla Public License 1.1
    url: https://www.mozilla.org/en-US/MPL/1.1/
  version: 3.2.1
servers:
- url: https://auth.biodiversitydata.se/userdetails
paths:
  /ws/flickr:
    get:
      tags:
      - users
      summary: Get list of flickr users
      description: "Lists all flickr profiles known to the application, including\
        \ their ala id, flickr id, username and their flickr URL"
      operationId: flickr
      responses:
        "200":
          description: Successful get flickr users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /ws/getUserStats:
    get:
      tags:
      - users
      summary: Get total count of users in the system
      description: "Gets a count of all users in the system, excluding locked and\
        \ non-activated accounts.  In addition it also provides a count of users from\
        \ one year ago."
      operationId: getUserStats
      responses:
        "200":
          description: Successful retrieved user counts
          content:
            application/json:
              schema:
                type: string
  /property/getProperty:
    get:
      tags:
      - properties
      summary: Get Property
      description: "Get a property value for a user.  Required scopes: 'users/read'."
      operationId: getProperty
      parameters:
      - name: alaId
        in: query
        description: The user's ALA ID
        required: true
        schema:
          type: integer
          format: int64
      - name: name
        in: query
        description: The name of the property to get
        required: true
        schema:
          type: string
      - name: Accept
        in: header
        description: Must be application/json
        required: true
        schema:
          type: string
          enum:
          - application/json
      responses:
        "200":
          description: Successful get property request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProperty'
      security:
      - openIdConnect:
        - users/read
  /property/saveProperty:
    post:
      tags:
      - properties
      summary: Save a Property
      description: "Saves a property value for a user.  Required scopes: 'users/write'."
      operationId: saveProperty
      parameters:
      - name: alaId
        in: query
        description: The user's ALA ID
        required: true
        schema:
          type: integer
          format: int64
      - name: name
        in: query
        description: The name of the property to set
        required: true
        schema:
          type: string
      - name: value
        in: query
        description: The value of the property to set.
        schema:
          type: string
      - name: Accept
        in: header
        description: Must be application/json
        required: true
        schema:
          type: string
          enum:
          - application/json
      responses:
        "200":
          description: Successful save property request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProperty'
        "404":
          description: Could not find user
          content:
            text/plain: {}
      security:
      - openIdConnect:
        - users/write
  /userDetails/byRole:
    get:
      tags:
      - users
      summary: Get Users by Role
      description: "Get Users by Role.  Required scopes: 'users/read'."
      operationId: byRole
      parameters:
      - name: role
        in: query
        description: The role to get users for
        required: true
        schema:
          type: string
      - name: id
        in: query
        description: A list of user ids or usernames to limit the results to
        schema:
          type: string
      - name: includeProps
        in: query
        description: Whether to include additional user properties or not
        schema:
          type: string
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema:
                type: array
      security:
      - openIdConnect:
        - users/read
  /userDetails/getUserDetails:
    post:
      tags:
      - users
      summary: Get User Details
      description: "Get User Details.  Required scopes: 'users/read'."
      operationId: getUserDetails
      parameters:
      - name: userName
        in: query
        description: The username of the user
        schema:
          type: string
      - name: includeProps
        in: query
        description: Whether to include additional user properties or not
        schema:
          type: string
      responses:
        "200":
          description: User Details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
      security:
      - openIdConnect:
        - users/read
  /userDetails/getUserDetailsFromIdList:
    post:
      tags:
      - users
      summary: Get User Details by id list
      description: "Get a list of user details for a list of user ids.  Required scopes:\
        \ 'users/read'."
      operationId: getUserDetailsFromIdList
      requestBody:
        description: The list of user ids to request and whether to include extended
          properties
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetUserDetailsFromIdListRequest'
        required: true
      responses:
        "200":
          description: User Details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserDetailsFromIdListResponse'
      security:
      - openIdConnect:
        - users/read
  /userDetails/getUserList:
    post:
      tags:
      - users
      summary: Get User List
      description: "Get a list of all users.  Required scopes: 'users/read'."
      operationId: getUserList
      responses:
        "200":
          description: Returns a map of user's email addresses to their names
          content:
            application/json:
              schema:
                type: string
      deprecated: true
      security:
      - openIdConnect:
        - users/read
  /userDetails/getUserListFull:
    post:
      tags:
      - users
      summary: Get User List With Ids
      description: "Get a list of all users by their user id.  Required scopes: 'users/read'."
      operationId: getUserListFull
      responses:
        "200":
          description: User Details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetails'
      deprecated: true
      security:
      - openIdConnect:
        - users/read
  /userDetails/getUserListWithIds:
    post:
      tags:
      - users
      summary: Get User List With Ids
      description: "Get a list of all users by their user id.  Required scopes: 'users/read'."
      operationId: getUserListWithIds
      responses:
        "200":
          description: Returns a map of user's ids to their names
          content:
            application/json:
              schema:
                type: string
      deprecated: true
      security:
      - openIdConnect:
        - users/read
  /userDetails/search:
    get:
      tags:
      - users
      summary: Search users
      description: "Search for users by username, email or display name.  Required\
        \ scopes: 'users/read'."
      operationId: search
      parameters:
      - name: q
        in: query
        description: "Search query for the user's username, email or display name"
        required: true
        schema:
          type: string
      - name: max
        in: query
        description: Maximum number of results to return
        schema:
          type: string
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetails'
      security:
      - openIdConnect:
        - users/read
components:
  schemas:
    Role:
      type: object
      properties:
        role:
          type: string
        description:
          type: string
        id:
          type: integer
          format: int64
    User:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        userName:
          type: string
        email:
          type: string
        dateCreated:
          type: string
          format: date-time
        lastUpdated:
          type: string
          format: date-time
        lastLogin:
          type: string
          format: date-time
        activated:
          type: boolean
        locked:
          type: boolean
        tempAuthKey:
          type: string
        displayName:
          type: string
        userRoles:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
        id:
          type: integer
          format: int64
        userProperties:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/UserProperty'
    UserProperty:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        name:
          type: string
        value:
          type: string
        id:
          type: integer
          format: int64
        userId:
          type: object
    UserRole:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        role:
          $ref: '#/components/schemas/Role'
        id:
          type: integer
          format: int64
        userId:
          type: object
        roleId:
          type: object
    UserDetails:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        userName:
          type: string
        userId:
          type: string
        locked:
          type: boolean
        organisation:
          type: string
        city:
          type: string
        state:
          type: string
        country:
          type: string
        roles:
          uniqueItems: true
          type: array
          items:
            type: string
        primaryUserType:
          type: string
        secondaryUserType:
          type: string
        telephone:
          type: string
        props:
          type: object
          additionalProperties:
            type: string
        displayName:
          type: string
        email:
          type: string
        secondaryUserTypeProperty:
          type: string
          writeOnly: true
    GetUserDetailsFromIdListResponse:
      type: object
      properties:
        success:
          type: boolean
        users:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/UserDetails'
        invalidIds:
          type: array
          items:
            type: integer
            format: int64
        message:
          type: string
    GetUserDetailsFromIdListRequest:
      type: object
      properties:
        includeProps:
          type: boolean
        userIds:
          type: array
          items:
            type: integer
            format: int64
  securitySchemes:
    openIdConnect:
      type: openIdConnect
      openIdConnectUrl: https://auth.biodiversitydata.se/cas/oidc/.well-known
    oauth:
      type: oauth2
      flows:
        clientCredentials:
          authorizationUrl: https://auth.biodiversitydata.se/cas/oidc/authorize
          tokenUrl: https://auth.biodiversitydata.se/cas/oidc/token
          refreshUrl: https://auth.biodiversitydata.se/cas/oidc/refresh
          scopes:
            users/read: Read or list any or all user records
            users/write: "Write to a user's record, eg update a user's attributes."
        authorizationCode:
          authorizationUrl: https://auth.biodiversitydata.se/cas/oidc/authorize
          tokenUrl: https://auth.biodiversitydata.se/cas/oidc/token
          refreshUrl: https://auth.biodiversitydata.se/cas/oidc/refresh
          scopes:
            users/read: Read or list any or all user records
            users/write: "Write to a user's record, eg update a user's attributes."
